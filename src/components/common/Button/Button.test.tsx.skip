import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './Button';

describe('Button Component', () => {
  it('should render without crashing', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });

  it('should render children correctly', () => {
    render(<Button>Test Button</Button>);
    expect(screen.getByText('Test Button')).toBeInTheDocument();
  });

  it('should call onClick when clicked', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    
    const button = screen.getByText('Click me');
    fireEvent.click(button);
    
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('should handle multiple clicks', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    
    const button = screen.getByText('Click me');
    fireEvent.click(button);
    fireEvent.click(button);
    fireEvent.click(button);
    
    expect(handleClick).toHaveBeenCalledTimes(3);
  });

  it('should apply variant class', () => {
    const { container } = render(
      <Button variant="primary">Primary Button</Button>
    );
    
    const button = screen.getByText('Primary Button');
    expect(button.className).toContain('primary');
  });

  it('should apply size class', () => {
    const { container } = render(
      <Button size="lg">Large Button</Button>
    );
    
    const button = screen.getByText('Large Button');
    expect(button.className).toContain('lg');
  });

  it('should be disabled when disabled prop is true', () => {
    render(<Button disabled>Disabled Button</Button>);
    
    const button = screen.getByText('Disabled Button');
    expect(button).toBeDisabled();
  });

  it('should not call onClick when disabled', () => {
    const handleClick = jest.fn();
    render(
      <Button disabled onClick={handleClick}>
        Disabled Button
      </Button>
    );
    
    const button = screen.getByText('Disabled Button');
    fireEvent.click(button);
    
    expect(handleClick).not.toHaveBeenCalled();
  });

  it('should apply custom className', () => {
    render(<Button className="custom-class">Button</Button>);
    
    const button = screen.getByText('Button');
    expect(button.className).toContain('custom-class');
  });

  it('should forward ref', () => {
    const ref = React.createRef<HTMLButtonElement>();
    render(<Button ref={ref}>Button</Button>);
    
    expect(ref.current).toBeInstanceOf(HTMLButtonElement);
  });

  it('should handle type attribute', () => {
    render(<Button type="submit">Submit</Button>);
    
    const button = screen.getByText('Submit');
    expect(button).toHaveAttribute('type', 'submit');
  });

  it('should render with icon', () => {
    render(
      <Button>
        <i className="fas fa-check"></i>
        With Icon
      </Button>
    );
    
    expect(screen.getByText('With Icon')).toBeInTheDocument();
    const icon = document.querySelector('.fa-check');
    expect(icon).toBeInTheDocument();
  });

  it('should handle loading state', () => {
    render(<Button loading>Loading</Button>);
    
    const button = screen.getByRole('button');
    expect(button).toHaveAttribute('disabled');
  });

  it('should render loading spinner when loading', () => {
    render(<Button loading>Loading</Button>);
    
    const spinner = document.querySelector('.spinner');
    if (spinner) {
      expect(spinner).toBeInTheDocument();
    }
  });

  it('should handle full width prop', () => {
    render(<Button fullWidth>Full Width</Button>);
    
    const button = screen.getByText('Full Width');
    // Verifica se tem a classe full-width
    expect(button.className).toContain('full-width');
  });

  it('should handle aria-label', () => {
    render(<Button aria-label="Custom Label">Button</Button>);
    
    const button = screen.getByLabelText('Custom Label');
    expect(button).toBeInTheDocument();
  });

  it('should handle keyboard events', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Button</Button>);
    
    const button = screen.getByText('Button');
    fireEvent.keyDown(button, { key: 'Enter', code: 'Enter' });
    
    // Button should handle Enter key
    expect(button).toBeInTheDocument();
  });
});

