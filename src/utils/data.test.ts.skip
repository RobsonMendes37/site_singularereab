import { contactInfo, services, teamMembers } from './data';

describe('data Utils', () => {
  describe('contactInfo', () => {
    it('should have all required contact fields', () => {
      expect(contactInfo).toHaveProperty('phone');
      expect(contactInfo).toHaveProperty('email');
      expect(contactInfo).toHaveProperty('address');
      expect(contactInfo).toHaveProperty('hours');
    });

    it('should have valid phone format', () => {
      expect(contactInfo.phone).toMatch(/\(\d{2}\)\s?\d{4,5}-?\d{4}/);
    });

    it('should have valid email format', () => {
      expect(contactInfo.email).toMatch(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
    });

    it('should have non-empty address', () => {
      expect(contactInfo.address.length).toBeGreaterThan(10);
    });

    it('should have hours object with weekdays and weekend', () => {
      expect(contactInfo.hours).toHaveProperty('weekdays');
      expect(contactInfo.hours).toHaveProperty('weekend');
      
      expect(typeof contactInfo.hours.weekdays).toBe('string');
      expect(typeof contactInfo.hours.weekend).toBe('string');
    });
  });

  describe('services', () => {
    it('should export services array', () => {
      expect(Array.isArray(services)).toBe(true);
      expect(services.length).toBeGreaterThan(0);
    });

    it('should have required fields for each service', () => {
      services.forEach(service => {
        expect(service).toHaveProperty('id');
        expect(service).toHaveProperty('title');
        expect(service).toHaveProperty('icon');
        expect(service).toHaveProperty('description');
      });
    });

    it('should have valid data types', () => {
      services.forEach(service => {
        expect(typeof service.id).toBe('string');
        expect(typeof service.title).toBe('string');
        expect(typeof service.icon).toBe('string');
        expect(typeof service.description).toBe('string');
      });
    });

    it('should have unique IDs', () => {
      const ids = services.map(s => s.id);
      const uniqueIds = new Set(ids);
      
      expect(uniqueIds.size).toBe(services.length);
    });

    it('should have meaningful descriptions', () => {
      services.forEach(service => {
        expect(service.description.length).toBeGreaterThan(20);
      });
    });

    it('should have valid icon classes (FontAwesome)', () => {
      services.forEach(service => {
        expect(service.icon).toMatch(/^fa[srlb]?\s+fa-/);
      });
    });
  });

  describe('teamMembers', () => {
    it('should export teamMembers array', () => {
      expect(Array.isArray(teamMembers)).toBe(true);
      expect(teamMembers.length).toBeGreaterThan(0);
    });

    it('should have required fields for each team member', () => {
      teamMembers.forEach(member => {
        expect(member).toHaveProperty('id');
        expect(member).toHaveProperty('name');
        expect(member).toHaveProperty('role');
        expect(member).toHaveProperty('image');
        expect(member).toHaveProperty('bio');
        expect(member).toHaveProperty('specialties');
      });
    });

    it('should have valid data types', () => {
      teamMembers.forEach(member => {
        expect(typeof member.id).toBe('string');
        expect(typeof member.name).toBe('string');
        expect(typeof member.role).toBe('string');
        expect(typeof member.image).toBe('string');
        expect(typeof member.bio).toBe('string');
        expect(Array.isArray(member.specialties)).toBe(true);
      });
    });

    it('should have unique IDs', () => {
      const ids = teamMembers.map(m => m.id);
      const uniqueIds = new Set(ids);
      
      expect(uniqueIds.size).toBe(teamMembers.length);
    });

    it('should have meaningful bios', () => {
      teamMembers.forEach(member => {
        expect(member.bio.length).toBeGreaterThan(30);
      });
    });

    it('should have at least one specialty per member', () => {
      teamMembers.forEach(member => {
        expect(member.specialties.length).toBeGreaterThan(0);
      });
    });

    it('should have valid image paths', () => {
      teamMembers.forEach(member => {
        expect(member.image).toMatch(/\.(jpg|jpeg|png|webp)$/i);
      });
    });

    it('should have non-empty names', () => {
      teamMembers.forEach(member => {
        expect(member.name.trim().length).toBeGreaterThan(0);
        expect(member.name).not.toBe('');
      });
    });

    it('should have non-empty roles', () => {
      teamMembers.forEach(member => {
        expect(member.role.trim().length).toBeGreaterThan(0);
        expect(member.role).not.toBe('');
      });
    });
  });

  describe('data consistency', () => {
    it('should have consistent specialty format', () => {
      teamMembers.forEach(member => {
        member.specialties.forEach(specialty => {
          expect(typeof specialty).toBe('string');
          expect(specialty.length).toBeGreaterThan(3);
        });
      });
    });
  });
});

